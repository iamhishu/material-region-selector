{"version":3,"sources":["../../src/SelectBox.js","../../src/common.js","../../src/CountrySelector.js","../../src/RegionSelector.js","../../src/index.js","App.js","index.js"],"names":["SelectBox","styled","select","_templateObject","_taggedTemplateLiteralLoose","Option","option","_templateObject2","SelectBoxWrapper","div","_templateObject3","Label","label","_templateObject4","capitalize","str","words","split","i","length","word","charAt","toUpperCase","slice","join","CountrySelector","_ref","showCountryFlag","showLabel","labelProps","inputProps","value","_onChange","onChange","disabled","shortCode","leadingCountries","allowcountry","_useState","useState","allCountries","filteredCountry","setFilteredCountry","useEffect","originalCountries","concat","countryToMoveOnTop","map","item","toLowerCase","uniqueResultingCountries","filter","includes","index","self","findIndex","obj","oc","al","fi","React","createElement","_extends","htmlFor","Fragment","name","id","e","target","key","isoCode","String","fromCodePoint","replace","_char","charCodeAt","propTypes","PropTypes","string","bool","isRequired","object","func","RegionSelector","country","customOptions","whitelist","c","showRegionInput","setShowRegionInput","_useState2","countryRegions","setCountryRegions","_useState3","countries","setCountries","newRegions","nwR","shortIdentifier","push","regionBot","bot","con","rg","Object","keys","region","wlR","fL","result","CountrySelector$1","className","styles","test","style","padding","RegionSelector$1","_ref2","App","_slicedToArray","setValue","_useState4","state","setState","console","log","width","disabledCountrySelect","textTransform","borderColor","CA","US","in","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b2dfee2.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst SelectBox = styled.select`\n  padding: 0.5rem;\n  font-size: 1rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: #fff;\n  color: #333;\n  outline: none;\n  appearance: none;\n  background-image: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M2.393 11.13l6.536 6.537a1.25 1.25 0 0 0 1.768 0l6.536-6.537a1.25 1.25 0 0 0-1.768-1.768l-5.768 5.77-5.768-5.77a1.25 1.25 0 0 0-1.768 1.768z' fill='%23ccc'/%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: right 0.5rem center;\n`;\nconst Option = styled.option`\n  padding: 0.5rem;\n  background-color: #fff;\n  color: #333;\n\n  &:hover {\n    background-color: #ccc;\n    color: #fff;\n  }\n\n  &:checked {\n    background-color: #ccc;\n    color: #fff;\n  }\n`;\nconst SelectBoxWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem;\n`;\n\nconst Label = styled.label`\n  font-size: 1rem;\n  margin-bottom: 0.5rem;\n`;\n\n// const SelectBox = styled.select`\n//   padding: 0.5rem;\n//   font-size: 1rem;\n//   border: 1px solid #ccc;\n//   border-radius: 4px;\n//   background-color: #fff;\n//   color: #333;\n//   outline: none;\n//   appearance: none;\n//   background-image: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M2.393 11.13l6.536 6.537a1.25 1.25 0 0 0 1.768 0l6.536-6.537a1.25 1.25 0 0 0-1.768-1.768l-5.768 5.77-5.768-5.77a1.25 1.25 0 0 0-1.768 1.768z' fill='%23ccc'/%3E%3C/svg%3E\");\n//   background-repeat: no-repeat;\n//   background-position: right 0.5rem center;\n// `;\n\nexport { SelectBoxWrapper, SelectBox, Option, Label }\n\n\n// const allCountriess = [\n//   { code: 'AD', label: 'Andorra', phone: '376' },\n//   { code: 'AE', label: 'United Arab Emirates', phone: '971' },\n//   { code: 'AF', label: 'Afghanistan', phone: '93' },\n//   { code: 'AG', label: 'Antigua and Barbuda', phone: '1-268' },\n//   { code: 'AI', label: 'Anguilla', phone: '1-264' },\n//   { code: 'AL', label: 'Albania', phone: '355' },\n//   { code: 'AM', label: 'Armenia', phone: '374' },\n//   { code: 'AO', label: 'Angola', phone: '244' },\n//   { code: 'AQ', label: 'Antarctica', phone: '672' },\n//   { code: 'AR', label: 'Argentina', phone: '54' },\n//   { code: 'AS', label: 'American Samoa', phone: '1-684' },\n//   { code: 'AT', label: 'Austria', phone: '43' },\n//   { code: 'AU', label: 'Australia', phone: '61', suggested: true },\n//   { code: 'AW', label: 'Aruba', phone: '297' },\n//   { code: 'AX', label: 'Alland Islands', phone: '358' },\n//   { code: 'AZ', label: 'Azerbaijan', phone: '994' },\n//   { code: 'BA', label: 'Bosnia and Herzegovina', phone: '387' },\n//   { code: 'BB', label: 'Barbados', phone: '1-246' },\n//   { code: 'BD', label: 'Bangladesh', phone: '880' },\n//   { code: 'BE', label: 'Belgium', phone: '32' },\n//   { code: 'BF', label: 'Burkina Faso', phone: '226' },\n//   { code: 'BG', label: 'Bulgaria', phone: '359' },\n//   { code: 'BH', label: 'Bahrain', phone: '973' },\n//   { code: 'BI', label: 'Burundi', phone: '257' },\n//   { code: 'BJ', label: 'Benin', phone: '229' },\n//   { code: 'BL', label: 'Saint Barthelemy', phone: '590' },\n//   { code: 'BM', label: 'Bermuda', phone: '1-441' },\n//   { code: 'BN', label: 'Brunei Darussalam', phone: '673' },\n//   { code: 'BO', label: 'Bolivia', phone: '591' },\n//   { code: 'BR', label: 'Brazil', phone: '55' },\n//   { code: 'BS', label: 'Bahamas', phone: '1-242' },\n//   { code: 'BT', label: 'Bhutan', phone: '975' },\n//   { code: 'BV', label: 'Bouvet Island', phone: '47' },\n//   { code: 'BW', label: 'Botswana', phone: '267' },\n//   { code: 'BY', label: 'Belarus', phone: '375' },\n//   { code: 'BZ', label: 'Belize', phone: '501' },\n//   { code: 'CA', label: 'Canada', phone: '1', suggested: true },\n//   { code: 'CC', label: 'Cocos (Keeling) Islands', phone: '61' },\n//   { code: 'CD', label: 'Congo, Democratic Republic of the', phone: '243' },\n//   { code: 'CF', label: 'Central African Republic', phone: '236' },\n//   { code: 'CG', label: 'Congo, Republic of the', phone: '242' },\n//   { code: 'CH', label: 'Switzerland', phone: '41' },\n//   { code: 'CI', label: \"Cote d'Ivoire\", phone: '225' },\n//   { code: 'CK', label: 'Cook Islands', phone: '682' },\n//   { code: 'CL', label: 'Chile', phone: '56' },\n//   { code: 'CM', label: 'Cameroon', phone: '237' },\n//   { code: 'CN', label: 'China', phone: '86' },\n//   { code: 'CO', label: 'Colombia', phone: '57' },\n//   { code: 'CR', label: 'Costa Rica', phone: '506' },\n//   { code: 'CU', label: 'Cuba', phone: '53' },\n//   { code: 'CV', label: 'Cape Verde', phone: '238' },\n//   { code: 'CW', label: 'Curacao', phone: '599' },\n//   { code: 'CX', label: 'Christmas Island', phone: '61' },\n//   { code: 'CY', label: 'Cyprus', phone: '357' },\n//   { code: 'CZ', label: 'Czech Republic', phone: '420' },\n//   { code: 'DE', label: 'Germany', phone: '49', suggested: true },\n//   { code: 'DJ', label: 'Djibouti', phone: '253' },\n//   { code: 'DK', label: 'Denmark', phone: '45' },\n//   { code: 'DM', label: 'Dominica', phone: '1-767' },\n//   { code: 'DO', label: 'Dominican Republic', phone: '1-809' },\n//   { code: 'DZ', label: 'Algeria', phone: '213' },\n//   { code: 'EC', label: 'Ecuador', phone: '593' },\n//   { code: 'EE', label: 'Estonia', phone: '372' },\n//   { code: 'EG', label: 'Egypt', phone: '20' },\n//   { code: 'EH', label: 'Western Sahara', phone: '212' },\n//   { code: 'ER', label: 'Eritrea', phone: '291' },\n//   { code: 'ES', label: 'Spain', phone: '34' },\n//   { code: 'ET', label: 'Ethiopia', phone: '251' },\n//   { code: 'FI', label: 'Finland', phone: '358' },\n//   { code: 'FJ', label: 'Fiji', phone: '679' },\n//   { code: 'FK', label: 'Falkland Islands (Malvinas)', phone: '500' },\n//   { code: 'FM', label: 'Micronesia, Federated States of', phone: '691' },\n//   { code: 'FO', label: 'Faroe Islands', phone: '298' },\n//   { code: 'FR', label: 'France', phone: '33', suggested: true },\n//   { code: 'GA', label: 'Gabon', phone: '241' },\n//   { code: 'GB', label: 'United Kingdom', phone: '44' },\n//   { code: 'GD', label: 'Grenada', phone: '1-473' },\n//   { code: 'GE', label: 'Georgia', phone: '995' },\n//   { code: 'GF', label: 'French Guiana', phone: '594' },\n//   { code: 'GG', label: 'Guernsey', phone: '44' },\n//   { code: 'GH', label: 'Ghana', phone: '233' },\n//   { code: 'GI', label: 'Gibraltar', phone: '350' },\n//   { code: 'GL', label: 'Greenland', phone: '299' },\n//   { code: 'GM', label: 'Gambia', phone: '220' },\n//   { code: 'GN', label: 'Guinea', phone: '224' },\n//   { code: 'GP', label: 'Guadeloupe', phone: '590' },\n//   { code: 'GQ', label: 'Equatorial Guinea', phone: '240' },\n//   { code: 'GR', label: 'Greece', phone: '30' },\n//   {\n//     code: 'GS',\n//     label: 'South Georgia and the South Sandwich Islands',\n//     phone: '500'\n//   },\n//   { code: 'GT', label: 'Guatemala', phone: '502' },\n//   { code: 'GU', label: 'Guam', phone: '1-671' },\n//   { code: 'GW', label: 'Guinea-Bissau', phone: '245' },\n//   { code: 'GY', label: 'Guyana', phone: '592' },\n//   { code: 'HK', label: 'Hong Kong', phone: '852' },\n//   { code: 'HM', label: 'Heard Island and McDonald Islands', phone: '672' },\n//   { code: 'HN', label: 'Honduras', phone: '504' },\n//   { code: 'HR', label: 'Croatia', phone: '385' },\n//   { code: 'HT', label: 'Haiti', phone: '509' },\n//   { code: 'HU', label: 'Hungary', phone: '36' },\n//   { code: 'ID', label: 'Indonesia', phone: '62' },\n//   { code: 'IE', label: 'Ireland', phone: '353' },\n//   { code: 'IL', label: 'Israel', phone: '972' },\n//   { code: 'IM', label: 'Isle of Man', phone: '44' },\n//   { code: 'IN', label: 'India', phone: '91' },\n//   { code: 'IO', label: 'British Indian Ocean Territory', phone: '246' },\n//   { code: 'IQ', label: 'Iraq', phone: '964' },\n//   { code: 'IR', label: 'Iran, Islamic Republic of', phone: '98' },\n//   { code: 'IS', label: 'Iceland', phone: '354' },\n//   { code: 'IT', label: 'Italy', phone: '39' },\n//   { code: 'JE', label: 'Jersey', phone: '44' },\n//   { code: 'JM', label: 'Jamaica', phone: '1-876' },\n//   { code: 'JO', label: 'Jordan', phone: '962' },\n//   { code: 'JP', label: 'Japan', phone: '81', suggested: true },\n//   { code: 'KE', label: 'Kenya', phone: '254' },\n//   { code: 'KG', label: 'Kyrgyzstan', phone: '996' },\n//   { code: 'KH', label: 'Cambodia', phone: '855' },\n//   { code: 'KI', label: 'Kiribati', phone: '686' },\n//   { code: 'KM', label: 'Comoros', phone: '269' },\n//   { code: 'KN', label: 'Saint Kitts and Nevis', phone: '1-869' },\n//   { code: 'KP', label: \"Korea, Democratic People's Republic of\", phone: '850' },\n//   { code: 'KR', label: 'Korea, Republic of', phone: '82' },\n//   { code: 'KW', label: 'Kuwait', phone: '965' },\n//   { code: 'KY', label: 'Cayman Islands', phone: '1-345' },\n//   { code: 'KZ', label: 'Kazakhstan', phone: '7' },\n//   { code: 'LA', label: \"Lao People's Democratic Republic\", phone: '856' },\n//   { code: 'LB', label: 'Lebanon', phone: '961' },\n//   { code: 'LC', label: 'Saint Lucia', phone: '1-758' },\n//   { code: 'LI', label: 'Liechtenstein', phone: '423' },\n//   { code: 'LK', label: 'Sri Lanka', phone: '94' },\n//   { code: 'LR', label: 'Liberia', phone: '231' },\n//   { code: 'LS', label: 'Lesotho', phone: '266' },\n//   { code: 'LT', label: 'Lithuania', phone: '370' },\n//   { code: 'LU', label: 'Luxembourg', phone: '352' },\n//   { code: 'LV', label: 'Latvia', phone: '371' },\n//   { code: 'LY', label: 'Libya', phone: '218' },\n//   { code: 'MA', label: 'Morocco', phone: '212' },\n//   { code: 'MC', label: 'Monaco', phone: '377' },\n//   { code: 'MD', label: 'Moldova, Republic of', phone: '373' },\n//   { code: 'ME', label: 'Montenegro', phone: '382' },\n//   { code: 'MF', label: 'Saint Martin (French part)', phone: '590' },\n//   { code: 'MG', label: 'Madagascar', phone: '261' },\n//   { code: 'MH', label: 'Marshall Islands', phone: '692' },\n//   {\n//     code: 'MK',\n//     label: 'Macedonia, the Former Yugoslav Republic of',\n//     phone: '389'\n//   },\n//   { code: 'ML', label: 'Mali', phone: '223' },\n//   { code: 'MM', label: 'Myanmar', phone: '95' },\n//   { code: 'MN', label: 'Mongolia', phone: '976' },\n//   { code: 'MO', label: 'Macao', phone: '853' },\n//   { code: 'MP', label: 'Northern Mariana Islands', phone: '1-670' },\n//   { code: 'MQ', label: 'Martinique', phone: '596' },\n//   { code: 'MR', label: 'Mauritania', phone: '222' },\n//   { code: 'MS', label: 'Montserrat', phone: '1-664' },\n//   { code: 'MT', label: 'Malta', phone: '356' },\n//   { code: 'MU', label: 'Mauritius', phone: '230' },\n//   { code: 'MV', label: 'Maldives', phone: '960' },\n//   { code: 'MW', label: 'Malawi', phone: '265' },\n//   { code: 'MX', label: 'Mexico', phone: '52' },\n//   { code: 'MY', label: 'Malaysia', phone: '60' },\n//   { code: 'MZ', label: 'Mozambique', phone: '258' },\n//   { code: 'NA', label: 'Namibia', phone: '264' },\n//   { code: 'NC', label: 'New Caledonia', phone: '687' },\n//   { code: 'NE', label: 'Niger', phone: '227' },\n//   { code: 'NF', label: 'Norfolk Island', phone: '672' },\n//   { code: 'NG', label: 'Nigeria', phone: '234' },\n//   { code: 'NI', label: 'Nicaragua', phone: '505' },\n//   { code: 'NL', label: 'Netherlands', phone: '31' },\n//   { code: 'NO', label: 'Norway', phone: '47' },\n//   { code: 'NP', label: 'Nepal', phone: '977' },\n//   { code: 'NR', label: 'Nauru', phone: '674' },\n//   { code: 'NU', label: 'Niue', phone: '683' },\n//   { code: 'NZ', label: 'New Zealand', phone: '64' },\n//   { code: 'OM', label: 'Oman', phone: '968' },\n//   { code: 'PA', label: 'Panama', phone: '507' },\n//   { code: 'PE', label: 'Peru', phone: '51' },\n//   { code: 'PF', label: 'French Polynesia', phone: '689' },\n//   { code: 'PG', label: 'Papua New Guinea', phone: '675' },\n//   { code: 'PH', label: 'Philippines', phone: '63' },\n//   { code: 'PK', label: 'Pakistan', phone: '92' },\n//   { code: 'PL', label: 'Poland', phone: '48' },\n//   { code: 'PM', label: 'Saint Pierre and Miquelon', phone: '508' },\n//   { code: 'PN', label: 'Pitcairn', phone: '870' },\n//   { code: 'PR', label: 'Puerto Rico', phone: '1' },\n//   { code: 'PS', label: 'Palestine, State of', phone: '970' },\n//   { code: 'PT', label: 'Portugal', phone: '351' },\n//   { code: 'PW', label: 'Palau', phone: '680' },\n//   { code: 'PY', label: 'Paraguay', phone: '595' },\n//   { code: 'QA', label: 'Qatar', phone: '974' },\n//   { code: 'RE', label: 'Reunion', phone: '262' },\n//   { code: 'RO', label: 'Romania', phone: '40' },\n//   { code: 'RS', label: 'Serbia', phone: '381' },\n//   { code: 'RU', label: 'Russian Federation', phone: '7' },\n//   { code: 'RW', label: 'Rwanda', phone: '250' },\n//   { code: 'SA', label: 'Saudi Arabia', phone: '966' },\n//   { code: 'SB', label: 'Solomon Islands', phone: '677' },\n//   { code: 'SC', label: 'Seychelles', phone: '248' },\n//   { code: 'SD', label: 'Sudan', phone: '249' },\n//   { code: 'SE', label: 'Sweden', phone: '46' },\n//   { code: 'SG', label: 'Singapore', phone: '65' },\n//   { code: 'SH', label: 'Saint Helena', phone: '290' },\n//   { code: 'SI', label: 'Slovenia', phone: '386' },\n//   { code: 'SJ', label: 'Svalbard and Jan Mayen', phone: '47' },\n//   { code: 'SK', label: 'Slovakia', phone: '421' },\n//   { code: 'SL', label: 'Sierra Leone', phone: '232' },\n//   { code: 'SM', label: 'San Marino', phone: '378' },\n//   { code: 'SN', label: 'Senegal', phone: '221' },\n//   { code: 'SO', label: 'Somalia', phone: '252' },\n//   { code: 'SR', label: 'Suriname', phone: '597' },\n//   { code: 'SS', label: 'South Sudan', phone: '211' },\n//   { code: 'ST', label: 'Sao Tome and Principe', phone: '239' },\n//   { code: 'SV', label: 'El Salvador', phone: '503' },\n//   { code: 'SX', label: 'Sint Maarten (Dutch part)', phone: '1-721' },\n//   { code: 'SY', label: 'Syrian Arab Republic', phone: '963' },\n//   { code: 'SZ', label: 'Swaziland', phone: '268' },\n//   { code: 'TC', label: 'Turks and Caicos Islands', phone: '1-649' },\n//   { code: 'TD', label: 'Chad', phone: '235' },\n//   { code: 'TF', label: 'French Southern Territories', phone: '262' },\n//   { code: 'TG', label: 'Togo', phone: '228' },\n//   { code: 'TH', label: 'Thailand', phone: '66' },\n//   { code: 'TJ', label: 'Tajikistan', phone: '992' },\n//   { code: 'TK', label: 'Tokelau', phone: '690' },\n//   { code: 'TL', label: 'Timor-Leste', phone: '670' },\n//   { code: 'TM', label: 'Turkmenistan', phone: '993' },\n//   { code: 'TN', label: 'Tunisia', phone: '216' },\n//   { code: 'TO', label: 'Tonga', phone: '676' },\n//   { code: 'TR', label: 'Turkey', phone: '90' },\n//   { code: 'TT', label: 'Trinidad and Tobago', phone: '1-868' },\n//   { code: 'TV', label: 'Tuvalu', phone: '688' },\n//   { code: 'TW', label: 'Taiwan, Province of China', phone: '886' },\n//   { code: 'TZ', label: 'United Republic of Tanzania', phone: '255' },\n//   { code: 'UA', label: 'Ukraine', phone: '380' },\n//   { code: 'UG', label: 'Uganda', phone: '256' },\n//   { code: 'US', label: 'United States', phone: '1', suggested: true },\n//   { code: 'UY', label: 'Uruguay', phone: '598' },\n//   { code: 'UZ', label: 'Uzbekistan', phone: '998' },\n//   { code: 'VA', label: 'Holy See (Vatican City State)', phone: '379' },\n//   { code: 'VC', label: 'Saint Vincent and the Grenadines', phone: '1-784' },\n//   { code: 'VE', label: 'Venezuela', phone: '58' },\n//   { code: 'VG', label: 'British Virgin Islands', phone: '1-284' },\n//   { code: 'VI', label: 'US Virgin Islands', phone: '1-340' },\n//   { code: 'VN', label: 'Vietnam', phone: '84' },\n//   { code: 'VU', label: 'Vanuatu', phone: '678' },\n//   { code: 'WF', label: 'Wallis and Futuna', phone: '681' },\n//   { code: 'WS', label: 'Samoa', phone: '685' },\n//   { code: 'XK', label: 'Kosovo', phone: '383' },\n//   { code: 'YE', label: 'Yemen', phone: '967' },\n//   { code: 'YT', label: 'Mayotte', phone: '262' },\n//   { code: 'ZA', label: 'South Africa', phone: '27' },\n//   { code: 'ZM', label: 'Zambia', phone: '260' },\n//   { code: 'ZW', label: 'Zimbabwe', phone: '263' }\n// ]\n","export const capitalize = (str) => {\n  // split the string into an array of words\n  const words = str.split(' ')\n\n  // iterate through each word\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n\n    // capitalize the first letter of the word\n    word = word.charAt(0).toUpperCase() + word.slice(1)\n\n    // put the capitalized word back into the array\n    words[i] = word\n  }\n\n  // join the array back into a string\n  const capitalizedStr = words.join(' ')\n\n  // return the capitalized string\n  return capitalizedStr\n}\n\n\nexport const countryToFlag = (isoCode) => {\n  return typeof String.fromCodePoint !== 'undefined'\n    ? isoCode\n      .toUpperCase()\n      .replace(/./g, (char) =>\n        String.fromCodePoint(char.charCodeAt(0) + 127397)\n      )\n    : isoCode\n}\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { SelectBoxWrapper, SelectBox, Option, Label } from './SelectBox'\nimport { allCountries } from 'country-region-data'\nimport { countryToFlag } from \"./common\"\n\nconst CountrySelector = ({\n  label,\n  showCountryFlag,\n  showLabel,\n  labelProps,\n  inputProps,\n  value,\n  onChange,\n  disabled,\n  shortCode,\n  leadingCountries,\n  allowcountry\n}) => {\n  const [filteredCountry, setFilteredCountry] = useState(allCountries)\n\n  useEffect(() => {\n    if (!leadingCountries) return\n    const originalCountries = [...filteredCountry]\n    const countryToMoveOnTop = leadingCountries.map((item) =>\n      item.toLowerCase()\n    )\n    const resultingCountries = originalCountries\n      .filter(\n        (item) =>\n          countryToMoveOnTop.includes(item[1].toLowerCase()) ||\n          countryToMoveOnTop.includes(item[0].toLowerCase())\n      )\n      .concat(\n        originalCountries.filter(\n          (item) =>\n            !countryToMoveOnTop.includes(item[1].toLowerCase()) ||\n            countryToMoveOnTop.includes(item[0].toLowerCase())\n        )\n      )\n    const uniqueResultingCountries = resultingCountries.filter(\n      (item, index, self) => {\n        return (\n          index ===\n          self.findIndex((obj) => obj[0] === item[0] && obj[1] === item[1])\n        )\n      }\n    )\n\n    setFilteredCountry(uniqueResultingCountries)\n  }, [leadingCountries])\n\n\n  /** whitelist countries */\n  useEffect(() => {\n    if (!allowcountry) return\n    const oc = [...filteredCountry]\n    const al = allowcountry.map((item) => item.toLowerCase())\n    const fi = oc.filter(\n      (item) =>\n        al.includes(item[1].toLowerCase()) || al.includes(item[0].toLowerCase())\n    )\n    setFilteredCountry(fi)\n  }, [allowcountry])\n\n  return (\n    <SelectBoxWrapper>\n      {showLabel && label && label !== '' ? (\n        <Label htmlFor='country_drop' {...labelProps}>\n          {label}\n        </Label>\n      ) : (\n        <React.Fragment>\n          {showLabel && (\n            <Label htmlFor='country_drop' {...labelProps}>\n              Select Country\n            </Label>\n          )}\n        </React.Fragment>\n      )}\n      <SelectBox\n        disabled={disabled}\n        value={value}\n        name='country_drop'\n        id='country_drop'\n        onChange={(e) => onChange(e.target.value, e)}\n        {...inputProps}\n      >\n        {filteredCountry.map((option, index) => (\n          <React.Fragment key={index}>\n            {showCountryFlag ? (\n              <React.Fragment>\n                <Option key={index} value={shortCode ? option[1] : option[0]}>\n                  {countryToFlag(option[1]) + ' ' + option[0]}\n                </Option>\n              </React.Fragment>\n            ) : (\n              <Option key={index} value={shortCode ? option[1] : option[0]}>\n                {option[0]}\n              </Option>\n            )}\n          </React.Fragment>\n        ))}\n      </SelectBox>\n    </SelectBoxWrapper>\n  )\n}\n\nCountrySelector.propTypes = {\n  label: PropTypes.string,\n  showCountryFlag: PropTypes.bool.isRequired,\n  // showLabel: PropTypes.bool,\n  labelProps: PropTypes.object,\n  inputProps: PropTypes.object,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n  // shortCode: PropTypes.bool,\n}\n\nexport default CountrySelector\n","import React, { useEffect, useState } from 'react'\nimport { SelectBoxWrapper, SelectBox, Option, Label } from './SelectBox'\nimport { allCountries } from 'country-region-data'\nimport { capitalize } from './common'\nimport PropTypes from 'prop-types'\n\nconst RegionSelector = ({\n  country,\n  label,\n  value,\n  onChange,\n  labelProps,\n  inputProps,\n  disabled,\n  showLabel,\n  shortCode,\n  customOptions,\n  whitelist\n}) => {\n  const index = allCountries.findIndex(\n    (c, i) =>\n      c[1].toLowerCase() === country.toLowerCase() ||\n      c[0].toLowerCase() === country.toLowerCase()\n  )\n\n  const [showRegionInput, setShowRegionInput] = useState(false)\n  const [countryRegions, setCountryRegions] = useState([])\n\n  const [countries, setCountries] = useState(allCountries)\n\n  useEffect(() => {\n    if (index === -1) {\n      setShowRegionInput(false)\n    } else {\n      if (typeof customOptions === 'object' && customOptions !== null) {\n        const newRegions = []\n        customOptions.map((item, index) => {\n          const nwR = [item.name, item.shortIdentifier]\n          newRegions.push(nwR)\n        })\n        setCountryRegions(\n          countries[index][2].length > 0\n            ? countries[index][2].concat(newRegions)\n            : []\n        )\n        setShowRegionInput(true)\n      } else {\n        if (typeof whitelist === 'object' && whitelist !== null) {\n          regionBot()\n        }\n        setCountryRegions(\n          countries[index][2].length > 0 ? countries[index][2] : []\n        )\n        setShowRegionInput(true)\n      }\n    }\n  }, [index])\n\n  const regionBot = (bot) => {\n    const con = [...allCountries]\n    const rg = []\n    Object.keys(whitelist).map((region) => {\n      const i = con.findIndex(\n        (obj) =>\n          obj[0].toLowerCase() === region.toLowerCase() ||\n          obj[1].toLowerCase() === region.toLowerCase()\n      )\n      if (i !== -1) {\n        ;[...con[i][2]].map((item) => {\n          rg.push([item[0].toLowerCase(), item[1].toLowerCase()])\n        })\n      }\n      const wlR = whitelist[region].map((item) => item.toLowerCase())\n      const fL = rg\n        .filter(\n          (region) =>\n            wlR.includes(region[0].toLowerCase()) ||\n            wlR.includes(region[1].toLowerCase())\n        )\n        .map((item) => capitalize(item[0]) || capitalize(item[1]))\n\n      if (fL.length > 0) {\n        const result = con[i][2].filter(\n          (region) => fL.includes(region[0]) || fL.includes(region[1])\n        )\n\n        con[i][2] = result\n      }\n    })\n\n    setCountries(con)\n  }\n\n  return (\n    <React.Fragment>\n      {showRegionInput && (\n        <SelectBoxWrapper>\n          {showLabel && label && label !== '' ? (\n            <Label htmlFor='state_drop' {...labelProps}>\n              {label}\n            </Label>\n          ) : (\n            <React.Fragment>\n              {showLabel && (\n                <Label htmlFor='state_drop' {...labelProps}>\n                  Select Region/State\n                </Label>\n              )}\n            </React.Fragment>\n          )}\n          <SelectBox\n            disabled={disabled}\n            value={value}\n            name='state_drop'\n            id='state_drop'\n            onChange={(e) => onChange(e.target.value, e)}\n            {...inputProps}\n          >\n            {countryRegions.map((option, index) => (\n              <Option key={index} value={shortCode ? option[1] : option[0]}>\n                {option[0]}\n              </Option>\n            ))}\n          </SelectBox>\n        </SelectBoxWrapper>\n      )}\n    </React.Fragment>\n  )\n}\nRegionSelector.propTypes = {\n  label: PropTypes.string,\n  // showLabel: PropTypes.bool,\n  labelProps: PropTypes.object,\n  inputProps: PropTypes.object,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n  // shortCode: PropTypes.bool,\n}\n\nexport default RegionSelector\n","import React from 'react'\nimport C from './CountrySelector'\nimport R from './RegionSelector'\nimport styles from './styles.module.css'\n\nexport const CountrySelector = ({\n  label,\n  showCountryFlag,\n  showLabel,\n  labelProps,\n  inputProps,\n  value,\n  onChange,\n  disabled,\n  shortCode,\n  leadingCountries,\n  allowcountry\n}) => {\n  return (\n    <div className={styles.test} style={{ padding: '10px' }}>\n      <C\n        showCountryFlag={showCountryFlag}\n        showLabel={showLabel}\n        label={label}\n        labelProps={labelProps}\n        inputProps={inputProps}\n        value={value}\n        onChange={onChange}\n        disabled={disabled}\n        shortCode={shortCode}\n        leadingCountries={leadingCountries}\n        allowcountry={allowcountry}\n      />\n    </div>\n  )\n}\n\nexport const RegionSelector = ({\n  country,\n  label,\n  value,\n  onChange,\n  showLabel,\n  labelProps,\n  inputProps,\n  shortCode,\n  customOptions,\n  whitelist,\n}) => {\n  return (\n    <div className={styles.test} style={{ padding: '10px' }}>\n      <R\n        showLabel={showLabel}\n        country={country}\n        label={label}\n        value={value}\n        onChange={onChange}\n        labelProps={labelProps}\n        inputProps={inputProps}\n        shortCode={shortCode}\n        customOptions={customOptions}\n        whitelist={whitelist}\n      />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { RegionSelector, CountrySelector } from 'material-region-selector'\nimport 'material-region-selector/dist/index.css'\n\nconst App = () => {\n  const [value, setValue] = useState('');\n  const [state, setState] = useState('');\n\n  const onChange = (country, e) => setValue(country)\n  const onStateChange = (state, e) => setState(state)\n\n\n  console.log(value, state)\n\n  return <div style={{ width: '300px' }}>\n    <CountrySelector\n\n      showCountryFlag\n      shortCode\n\n      // label=\"dhsaiasiufhsiu\"\n      //  labelProps={{ className: 'testClassname', style: { textTransform: 'uppercase' } }}\n      //inputProps={{ className: 'selectorInput', style: { borderColor: 'red' } }}\n      value={value}\n      onChange={onChange}\n      disabledCountrySelect={'india'}\n      leadingCountries={[\"in\"]}\n      allowcountry={[\"us\", \"af\", \"germany\", \"in\", \"cn\"]}\n\n    />\n\n\n    <RegionSelector\n      country={value}\n      // shortCode\n      showLabel\n      label=\"\"\n      value={state}\n      onChange={onStateChange}\n      labelProps={{ className: 'testClassname', style: { textTransform: 'uppercase' } }}\n      inputProps={{ className: 'selectorInput', style: { borderColor: 'red' } }}\n      // customOptions={[{\n      //   name: '--Thaliwal', shortIdentifier: '--TW',\n      // },\n      // {\n      //   name: '--nangal Khurd', shortIdentifier: '--NH',\n      // }\n      // ]}\n      whitelist={{\n        CA: [\"BC\", \"AB\", \"MB\"],\n        US: [\"washington\", \"Oregon\", \"Illinois\"],\n        in: ['hp', \"punjab\"],\n      }}\n\n    />\n  </div>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}